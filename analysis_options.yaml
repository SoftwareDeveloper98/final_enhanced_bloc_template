# This file configures the Dart static analysis tool.

# For more information about customizing analysis options, see
# https://dart.dev/guides/language/analysis-options

# Applying stricter linting rules for higher code quality.
# Using flutter_lints as a base, which is recommended for Flutter projects.
include: package:flutter_lints/flutter.yaml

analyzer:
  # Enable stricter type checking.
  strong-mode:
    implicit-casts: false # Disallow implicit casts.
    implicit-dynamic: false # Disallow implicit dynamic.

  # Exclude generated files from analysis.
  exclude:
    - "**/*.g.dart" # Generated by json_serializable, freezed, injectable, etc.
    - "**/*.freezed.dart" # Generated by freezed
    - "**/*.config.dart" # Generated by injectable
    - "lib/generated/**" # Common directory for generated code (e.g., assets by flutter_gen)
    - "**/generated_plugin_registrant.dart"

  # Optional: Specify language features if needed, though usually inferred.
  # language:
  #   strict-raw-types: true

  # Optional: Report errors for specific diagnostic codes.
  # errors:
  #   missing_required_param: error
  #   invalid_assignment: warning

linter:
  rules:
    # Code Style & Best Practices
    - always_declare_return_types
    - avoid_print # Use a proper logger instead.
    - avoid_relative_lib_imports # Use package imports for files in lib/.
    - avoid_redundant_argument_values
    - avoid_returning_null_for_void
    - avoid_unused_constructor_parameters
    - await_only_futures
    - camel_case_types
    - cancel_subscriptions # Ensure StreamSubscriptions are cancelled.
    - directives_ordering # Sort directives alphabetically.
    - empty_statements
    - hash_and_equals # Override hashCode if you override equals.
    - no_logic_in_create_state # Avoid logic in State.createState.
    - package_prefixed_library_names
    - prefer_asserts_in_initializer_lists
    - prefer_const_constructors
    - prefer_const_declarations
    - prefer_final_fields
    - prefer_final_in_for_each
    - prefer_final_locals
    - prefer_foreach # Use forEach instead of for-in loops for Iterables.
    - prefer_if_null_operators
    # - prefer_initializing_formal_parameters # Often good, but can be verbose.
    - prefer_is_empty # Use isEmpty/isNotEmpty instead of length check.
    - prefer_null_aware_operators
    - prefer_single_quotes # Or 'double_quotes' based on team preference.
    - sort_constructors_first
    - sort_unnamed_constructors_first
    - test_types_in_equals # Ensure type checking in equals method.
    - throw_in_finally # Avoid throwing errors in finally blocks.
    - unnecessary_await_in_return
    - unnecessary_brace_in_string_interps
    - unnecessary_lambdas
    - unnecessary_null_checks
    - unnecessary_parenthesis
    - unnecessary_statements
    - use_build_context_synchronously # Check if context is still mounted in async gaps.
    - use_key_in_widget_constructors # Important for widget identity.

    # Flutter Specific
    - use_super_parameters # For Flutter 3.7+ style super initializers in constructors.
    - sized_box_for_whitespace # Use SizedBox for spacing instead of Container.
    # - use_decorated_box # If you prefer DecoratedBox over Container with decoration.

    # Null Safety
    # Most null safety rules are covered by strong-mode and flutter_lints.

    # Pub related
    - sort_pub_dependencies # Keep pubspec.yaml dependencies sorted.

    # Consider adding more rules based on team preferences or specific project needs.
    # For example:
    # - public_member_api_docs # Enforce Dartdoc comments for public APIs.
    # - diagnostic_describe_all_properties # For Flutter Diagnosticable.
    # - flutter_style_todos # Enforce a specific TODO format.

    # Some rules can be controversial or highly opinionated, enable with care:
    # - always_put_required_named_parameters_first
    # - avoid_positional_boolean_parameters
    # - avoid_classes_with_only_static_members

    # Disable rules if necessary (though generally try to fix the lint warnings)
    # For example, if you have a legitimate reason for using print in a specific context:
    # avoid_print: false

# For more on configuring analysis options:
# https://dart.dev/tools/analysis#customizing-analysis-rules
# https://dart-lang.github.io/linter/lints/ (List of all linter rules)
